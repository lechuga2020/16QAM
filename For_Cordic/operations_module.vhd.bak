library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use work.myTypes.all;

entity operations_module is 
	port(rst: in std_logic; 
		  clk: in std_logic; 
		  bigger: in std_logic; 
		  ang: in std_logic_vector(total_pi_bits-1 downto 0);
		  xx: in std_logic_vector(total_pi_bits-1 downto 0); 
		  yy: in std_logic_vector(total_pi_bits-1 downto 0); 
		  xx_out: out std_logic_vector(total_pi_bits-1 downto 0);
		  yy_out: out std_logic_vector(total_pi_bits-1 downto 0); 
		  y: out std_logic_vector(total_pi_bits-1 downto 0); 
		  x: out std_logic_vector(total_pi_bits-1 downto 0));
end entity; 

architecture struct of operations_module is 

component registers_op is 
	port(rst: in std_logic; 
		  clk: in std_logic; 
		  enr: in std_logic; 
		  xx: in std_logic_vector(total_pi_bits-1 downto 0); 
		  yy: in std_logic_vector(total_pi_bits-1 downto 0); 
		  x: out std_logic_vector(total_pi_bits-1 downto 0);
		  y: out std_logic_vector(total_pi_bits-1 downto 0););
end component;

--outs registers_op
signal x_reg: std_logic_vector(total_pi_bits-1 downto 0);
signal y_reg: std_logic_vector(total_pi_bits-1 downto 0);

begin 




end architecture; 